{"version":3,"sources":["webpack://EcomSearch/webpack/universalModuleDefinition","webpack://EcomSearch/webpack/bootstrap","webpack://EcomSearch/external \"core-js/modules/es.array.splice.js\"","webpack://EcomSearch/external \"@ecomplus/utils\"","webpack://EcomSearch/external \"lodash.merge\"","webpack://EcomSearch/external \"core-js/modules/es.object.keys.js\"","webpack://EcomSearch/external \"core-js/modules/es.symbol.js\"","webpack://EcomSearch/external \"core-js/modules/es.symbol.description.js\"","webpack://EcomSearch/external \"core-js/modules/es.object.to-string.js\"","webpack://EcomSearch/external \"core-js/modules/es.symbol.iterator.js\"","webpack://EcomSearch/external \"core-js/modules/es.string.iterator.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.iterator.js\"","webpack://EcomSearch/external \"core-js/modules/web.dom-collections.iterator.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.filter.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.concat.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.slice.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.find.js\"","webpack://EcomSearch/external \"@ecomplus/client\"","webpack://EcomSearch/external \"lodash.clonedeep\"","webpack://EcomSearch/external \"core-js/modules/es.string.split.js\"","webpack://EcomSearch/external \"core-js/modules/es.regexp.exec.js\"","webpack://EcomSearch/external \"core-js/modules/web.dom-collections.for-each.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.join.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.index-of.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.sort.js\"","webpack://EcomSearch/external \"core-js/modules/es.array.map.js\"","webpack://EcomSearch/./src/methods/fetch.js","webpack://EcomSearch/./src/lib/dsl.js","webpack://EcomSearch/./src/methods/reset.js","webpack://EcomSearch/./src/methods/set-search-term.js","webpack://EcomSearch/./src/methods/set-page-number.js","webpack://EcomSearch/./src/methods/set-page-size.js","webpack://EcomSearch/./src/methods/set-sort-order.js","webpack://EcomSearch/./src/methods/merge-filter.js","webpack://EcomSearch/./src/methods/remove-filter.js","webpack://EcomSearch/./src/methods/set-spec.js","webpack://EcomSearch/./src/lib/common-filter.js","webpack://EcomSearch/./src/methods/set-category-names.js","webpack://EcomSearch/./src/methods/set-category-ids.js","webpack://EcomSearch/./src/methods/set-brand-names.js","webpack://EcomSearch/./src/methods/set-brand-ids.js","webpack://EcomSearch/./src/methods/set-skus.js","webpack://EcomSearch/./src/methods/set-product-ids.js","webpack://EcomSearch/./src/methods/set-price-range.js","webpack://EcomSearch/./src/methods/get-items.js","webpack://EcomSearch/./src/methods/get-total-count.js","webpack://EcomSearch/./src/methods/get-term-suggestions.js","webpack://EcomSearch/./src/lib/common-aggregation.js","webpack://EcomSearch/./src/methods/get-brands.js","webpack://EcomSearch/./src/methods/get-categories.js","webpack://EcomSearch/./src/methods/get-price-range.js","webpack://EcomSearch/./src/methods/get-specs.js","webpack://EcomSearch/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__6__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__9__","__WEBPACK_EXTERNAL_MODULE__10__","__WEBPACK_EXTERNAL_MODULE__11__","__WEBPACK_EXTERNAL_MODULE__12__","__WEBPACK_EXTERNAL_MODULE__13__","__WEBPACK_EXTERNAL_MODULE__14__","__WEBPACK_EXTERNAL_MODULE__15__","__WEBPACK_EXTERNAL_MODULE__16__","__WEBPACK_EXTERNAL_MODULE__17__","__WEBPACK_EXTERNAL_MODULE__18__","__WEBPACK_EXTERNAL_MODULE__19__","__WEBPACK_EXTERNAL_MODULE__20__","__WEBPACK_EXTERNAL_MODULE__21__","__WEBPACK_EXTERNAL_MODULE__22__","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","self","isSimpleSearch","axiosConfig","reqOptions","url","query","dsl","bool","Array","isArray","filter","queryString","forEach","term","terms","condition","field","keys","join","encodeURIComponent","method","data","search","then","result","history","localStorage","storageKey","hits","total","suggest","text","index","indexOf","splice","unshift","setItem","slice","visible","sort","in_stock","order","ad_relevance","aggs","brands","categories","specs","nested","path","grid","size","min_price","min","max_price","max","avg_price","avg","cloneDeep","undefined","setPageSize","setSortOrder","mergeFilter","multi_match","fields","merge","words","page","from","limit","enumOrder","timestamp","sales","length","_id","price","Date","now","_script","type","script","lang","source","push","views","getNestedRule","occur","find","rule","filters","gridId","textOptions","rules","prop","newProp","concurrentProp","removeFilter","categoryNames","commonFilter","categoryIds","brandNames","brandIds","skus","productIds","minPrice","maxPrice","isNaN","gte","lte","range","searchedItems","buckets","aggregations","commonAggregation","map","bucket","doc_count","options","_key","_storage","window","storeId","$ecomConfig","fetch","reset","setSearchTerm","setPageNumber","setSpec","setCategoryNames","setCategoryIds","setBrandNames","setBrandIds","setSkus","setProductIds","setPriceRange","getItems","getTotalCount","getTermSuggestions","getBrands","getCategories","getPriceRange","getSpecs","getItem","split"],"mappings":"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","file":"ecom-search.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"core-js/modules/es.array.splice.js\"), require(\"@ecomplus/utils\"), require(\"lodash.merge\"), require(\"core-js/modules/es.object.keys.js\"), require(\"core-js/modules/es.symbol.js\"), require(\"core-js/modules/es.symbol.description.js\"), require(\"core-js/modules/es.object.to-string.js\"), require(\"core-js/modules/es.symbol.iterator.js\"), require(\"core-js/modules/es.string.iterator.js\"), require(\"core-js/modules/es.array.iterator.js\"), require(\"core-js/modules/web.dom-collections.iterator.js\"), require(\"core-js/modules/es.array.filter.js\"), require(\"core-js/modules/es.array.concat.js\"), require(\"core-js/modules/es.array.slice.js\"), require(\"core-js/modules/es.array.find.js\"), require(\"@ecomplus/client\"), require(\"lodash.clonedeep\"), require(\"core-js/modules/es.string.split.js\"), require(\"core-js/modules/es.regexp.exec.js\"), require(\"core-js/modules/web.dom-collections.for-each.js\"), require(\"core-js/modules/es.array.join.js\"), require(\"core-js/modules/es.array.index-of.js\"), require(\"core-js/modules/es.array.sort.js\"), require(\"core-js/modules/es.array.map.js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"core-js/modules/es.array.splice.js\", \"@ecomplus/utils\", \"lodash.merge\", \"core-js/modules/es.object.keys.js\", \"core-js/modules/es.symbol.js\", \"core-js/modules/es.symbol.description.js\", \"core-js/modules/es.object.to-string.js\", \"core-js/modules/es.symbol.iterator.js\", \"core-js/modules/es.string.iterator.js\", \"core-js/modules/es.array.iterator.js\", \"core-js/modules/web.dom-collections.iterator.js\", \"core-js/modules/es.array.filter.js\", \"core-js/modules/es.array.concat.js\", \"core-js/modules/es.array.slice.js\", \"core-js/modules/es.array.find.js\", \"@ecomplus/client\", \"lodash.clonedeep\", \"core-js/modules/es.string.split.js\", \"core-js/modules/es.regexp.exec.js\", \"core-js/modules/web.dom-collections.for-each.js\", \"core-js/modules/es.array.join.js\", \"core-js/modules/es.array.index-of.js\", \"core-js/modules/es.array.sort.js\", \"core-js/modules/es.array.map.js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EcomSearch\"] = factory(require(\"core-js/modules/es.array.splice.js\"), require(\"@ecomplus/utils\"), require(\"lodash.merge\"), require(\"core-js/modules/es.object.keys.js\"), require(\"core-js/modules/es.symbol.js\"), require(\"core-js/modules/es.symbol.description.js\"), require(\"core-js/modules/es.object.to-string.js\"), require(\"core-js/modules/es.symbol.iterator.js\"), require(\"core-js/modules/es.string.iterator.js\"), require(\"core-js/modules/es.array.iterator.js\"), require(\"core-js/modules/web.dom-collections.iterator.js\"), require(\"core-js/modules/es.array.filter.js\"), require(\"core-js/modules/es.array.concat.js\"), require(\"core-js/modules/es.array.slice.js\"), require(\"core-js/modules/es.array.find.js\"), require(\"@ecomplus/client\"), require(\"lodash.clonedeep\"), require(\"core-js/modules/es.string.split.js\"), require(\"core-js/modules/es.regexp.exec.js\"), require(\"core-js/modules/web.dom-collections.for-each.js\"), require(\"core-js/modules/es.array.join.js\"), require(\"core-js/modules/es.array.index-of.js\"), require(\"core-js/modules/es.array.sort.js\"), require(\"core-js/modules/es.array.map.js\"));\n\telse\n\t\troot[\"EcomSearch\"] = factory(root[\"core-js/modules/es.array.splice.js\"], root[\"@ecomplus/utils\"], root[\"lodash.merge\"], root[\"core-js/modules/es.object.keys.js\"], root[\"core-js/modules/es.symbol.js\"], root[\"core-js/modules/es.symbol.description.js\"], root[\"core-js/modules/es.object.to-string.js\"], root[\"core-js/modules/es.symbol.iterator.js\"], root[\"core-js/modules/es.string.iterator.js\"], root[\"core-js/modules/es.array.iterator.js\"], root[\"core-js/modules/web.dom-collections.iterator.js\"], root[\"core-js/modules/es.array.filter.js\"], root[\"core-js/modules/es.array.concat.js\"], root[\"core-js/modules/es.array.slice.js\"], root[\"core-js/modules/es.array.find.js\"], root[\"@ecomplus/client\"], root[\"lodash.clonedeep\"], root[\"core-js/modules/es.string.split.js\"], root[\"core-js/modules/es.regexp.exec.js\"], root[\"core-js/modules/web.dom-collections.for-each.js\"], root[\"core-js/modules/es.array.join.js\"], root[\"core-js/modules/es.array.index-of.js\"], root[\"core-js/modules/es.array.sort.js\"], root[\"core-js/modules/es.array.map.js\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__4__, __WEBPACK_EXTERNAL_MODULE__5__, __WEBPACK_EXTERNAL_MODULE__6__, __WEBPACK_EXTERNAL_MODULE__7__, __WEBPACK_EXTERNAL_MODULE__8__, __WEBPACK_EXTERNAL_MODULE__9__, __WEBPACK_EXTERNAL_MODULE__10__, __WEBPACK_EXTERNAL_MODULE__11__, __WEBPACK_EXTERNAL_MODULE__12__, __WEBPACK_EXTERNAL_MODULE__13__, __WEBPACK_EXTERNAL_MODULE__14__, __WEBPACK_EXTERNAL_MODULE__15__, __WEBPACK_EXTERNAL_MODULE__16__, __WEBPACK_EXTERNAL_MODULE__17__, __WEBPACK_EXTERNAL_MODULE__18__, __WEBPACK_EXTERNAL_MODULE__19__, __WEBPACK_EXTERNAL_MODULE__20__, __WEBPACK_EXTERNAL_MODULE__21__, __WEBPACK_EXTERNAL_MODULE__22__, __WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","module.exports = __WEBPACK_EXTERNAL_MODULE__10__;","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","module.exports = __WEBPACK_EXTERNAL_MODULE__12__;","module.exports = __WEBPACK_EXTERNAL_MODULE__13__;","module.exports = __WEBPACK_EXTERNAL_MODULE__14__;","module.exports = __WEBPACK_EXTERNAL_MODULE__15__;","module.exports = __WEBPACK_EXTERNAL_MODULE__16__;","module.exports = __WEBPACK_EXTERNAL_MODULE__17__;","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","module.exports = __WEBPACK_EXTERNAL_MODULE__21__;","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","import { search } from '@ecomplus/client'\n\nexport default (self, isSimpleSearch, axiosConfig) => {\n  // mount axios req options for complex or simpĺe search\n  const reqOptions = {\n    url: '/items.json',\n    axiosConfig\n  }\n\n  if (isSimpleSearch === true) {\n    // https://www.elastic.co/guide/en/elasticsearch/reference/6.3/search-uri-request.html\n    const { query } = self.dsl\n    reqOptions.url += '?q='\n    if (query && query.bool && Array.isArray(query.bool.filter)) {\n      // parse query filters to string\n      let queryString = ''\n      query.bool.filter.forEach(({ term, terms }, i) => {\n        if (i > 0) {\n          queryString += ' AND '\n        }\n        const condition = term || terms\n        if (condition) {\n          const field = Object.keys(condition)[0]\n          const value = condition[field]\n          queryString += `${field}:${(Array.isArray(value) ? `(\"${value.join('\" \"')}\")` : value)}`\n        }\n      })\n      reqOptions.url += encodeURIComponent(queryString)\n    }\n    // handle pagination\n    ;['from', 'size'].forEach(field => {\n      if (self.dsl[field]) {\n        reqOptions.url += `&${field}=${self.dsl[field]}`\n      }\n    })\n  } else {\n    reqOptions.method = 'post'\n    reqOptions.data = self.dsl\n    if (isSimpleSearch && !axiosConfig) {\n      // fallback for old reference with `fetch(axiosConfig)`\n      reqOptions.axiosConfig = isSimpleSearch\n    }\n  }\n\n  // request Search API and return promise\n  return search(reqOptions).then(({ data }) => {\n    // save last result on instance\n    self.result = data\n    const { dsl, history, localStorage, storageKey } = self\n    if (data.hits.total && dsl && dsl.suggest) {\n      const { text } = dsl.suggest\n      if (text) {\n        // add search term to history\n        const index = history.indexOf(text)\n        if (index > -1) {\n          // prevent duplicated term\n          history.splice(index, 1)\n        }\n        history.unshift(text)\n        if (localStorage && storageKey) {\n          localStorage.setItem(storageKey, history.slice(0, 20).join('||'))\n        }\n      }\n    }\n    // resolving with response data\n    return data\n  })\n}\n\n/**\n * @typedef {object} result\n * @property {object} hits - Elasticsearch hits object\n * @property {number} hits.total - Total number of products found\n * @property {array<object>} hits.hits - List of resultant items\n * @property {object} aggregations - Elasticsearch aggregations results\n * @property {object} suggest - Search term suggestions object\n * @property {number} took - Request time in milliseconds\n */\n\n/**\n * @method\n * @name EcomSearch#fetch\n * @description Send POST request to\n * [E-Com Plus Search API]{@link https://developers.e-com.plus/docs/api/#/search/items/items}\n * and returns promise resolved with search result.\n *\n * @param {boolean} [isSimpleSearch=false] - Handle simple (and faster) search without sort and aggregations\n * @param {object} [axiosConfig] - Additional\n * [axios config]{@link https://github.com/axios/axios#request-config} object\n *\n * @returns {Promise<result|error>}\n *\n * @example\n\n// Run search request\nsearch.fetch()\n  .then(result => {\n    console.log(result.took)\n    console.log(`${result.hits.total} items found:`)\n    console.log(result.hits.hits)\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n */\n","export default {\n  query: {\n    bool: {\n      // condition: only visible products\n      filter: [\n        {\n          term: {\n            visible: true\n          }\n        }\n      ]\n    }\n  },\n  sort: [\n    // available && quantity >= min_quantity\n    {\n      in_stock: {\n        order: 'desc'\n      }\n    },\n    {\n      ad_relevance: {\n        order: 'desc'\n      }\n    },\n    '_score'\n  ],\n  aggs: {\n    brands: {\n      terms: {\n        field: 'brands.name'\n      }\n    },\n    categories: {\n      terms: {\n        field: 'categories.name'\n      }\n    },\n    // ref.: https://github.com/elastic/elasticsearch/issues/5789\n    specs: {\n      nested: {\n        path: 'specs'\n      },\n      aggs: {\n        grid: {\n          terms: {\n            field: 'specs.grid',\n            size: 30\n          },\n          aggs: {\n            text: {\n              terms: {\n                field: 'specs.text'\n              }\n            }\n          }\n        }\n      }\n    },\n    // Metric Aggregations\n    min_price: {\n      min: {\n        field: 'price'\n      }\n    },\n    max_price: {\n      max: {\n        field: 'price'\n      }\n    },\n    avg_price: {\n      avg: {\n        field: 'price'\n      }\n    }\n  }\n}\n","import query from './../lib/dsl'\nimport * as cloneDeep from 'lodash.clonedeep'\n\nexport default self => {\n  // reset Query DSL\n  self.dsl = cloneDeep(query)\n  // unset result\n  self.result = undefined\n  // reset default page limit and sort by views\n  return self.setPageSize().setSortOrder()\n}\n\n/**\n * @method\n * @name EcomSearch#reset\n * @description Reset default\n * [Query DSL]{@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html}\n * for [Search API]{@link https://developers.e-com.plus/docs/api/#/search/items/items}\n * request body and unset instance result.\n *\n * @returns {self}\n *\n * @example\n\n// Reset instance `dsl` and `result`\nsearch.reset()\n\n */\n","import * as merge from 'lodash.merge'\n\nexport default (self, term) => {\n  // match name and/or keyword with term\n  // https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html\n  self.mergeFilter({\n    multi_match: {\n      query: term,\n      fields: [\n        'name',\n        'keywords'\n      ]\n    }\n  }, 'must')\n\n  merge(self.dsl, {\n    // handle terms suggestion\n    // 'did you mean?'\n    // https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html\n    suggest: {\n      text: term,\n      words: {\n        term: {\n          field: 'name'\n        }\n      }\n    }\n  })\n\n  return self\n}\n\n/**\n * @method\n * @name EcomSearch#setSearchTerm\n * @description Defines term to match with product name\n * and/or keywords on next search request.\n *\n * @param {string} term - Term to be searched\n * @returns {self}\n *\n * @example\n\n// Set new search term\nsearch.setSearchTerm('smartphone')\n\n * @example\n\n// Set new term and run search request\nsearch.setSearchTerm('notebook').fetch()\n\n */\n","export default (self, page = 1) => {\n  self.dsl.from = self.dsl.size * (page - 1)\n  return self\n}\n\n/**\n * @method\n * @name EcomSearch#setPageNumber\n * @description Defines next page number for\n * search request (paginate results) starting from 1.\n *\n * @param {number} [page=1] - Integer page number\n * @returns {self}\n *\n * @example\n\n// Configure to get second page of results and run search request\nsearch.setPageNumber(2).fetch()\n\n* @example\n\n// Set back to page number 1\n// It's the default preseted page number\nsearch.setPageNumber()\n\n */\n","export default (self, limit = 24) => {\n  self.dsl.size = limit\n  return self\n}\n\n/**\n * @method\n * @name EcomSearch#setPageSize\n * @description Defines maximum number of result items for next search request.\n *\n * @param {number} [limit=24] - Integer max result size\n * @returns {self}\n *\n * @example\n\n// Set page size 20 and run search request\nsearch.setPageSize(20).fetch()\n\n* @example\n\n// Set to 24 the maxium results for next search\n// It's the default preseted page size\nsearch.setPageSize()\n\n */\n","import query from './../lib/dsl'\n\nexport default (self, enumOrder) => {\n  // get default sort array\n  const sort = query.sort.slice()\n  let timestamp\n\n  // defines most common sorting options\n  switch (enumOrder) {\n    case 'sales':\n      // sort by sales after relevance\n      sort.splice(2, 0, {\n        sales: {\n          order: 'desc'\n        }\n      })\n      break\n\n    case 'news':\n      // sort by hex ID after relevance replacing score sort\n      sort[sort.length - 1] = {\n        _id: {\n          order: 'desc'\n        }\n      }\n      break\n\n    case 'lowest_price':\n    case 'highest_price':\n      // sort by price after stock and before relevance\n      sort.splice(1, 0, {\n        price: {\n          order: enumOrder === 'lowest_price' ? 'asc' : 'desc'\n        }\n      })\n      break\n\n    case 'offers':\n      // sort by percentage offer price\n      timestamp = Date.now()\n      sort.splice(1, 0, {\n        _script: {\n          type: 'number',\n          script: {\n            lang: 'painless',\n            source: \"doc['price'].value > 0 && doc['base_price'].value > 0\" +\n              \" && (doc['price_effective_date.start'].empty || \" +\n                `doc['price_effective_date.start'].date.millis <= ${timestamp}L)` +\n              \" && (doc['price_effective_date.end'].empty || \" +\n                `doc['price_effective_date.end'].date.millis >= ${timestamp}L)` +\n              \" ? doc['base_price'].value / doc['price'].value : 0\"\n          },\n          order: 'desc'\n        }\n      })\n      break\n\n    case 'views':\n    case '':\n    case undefined:\n    case null:\n      // default sort by views after preseted sorting options\n      sort.push({\n        views: {\n          order: 'desc'\n        }\n      })\n      break\n\n    default:\n      // alphabetical order by 'slug', 'sku' or any\n      sort.splice(1, 0, {\n        [enumOrder]: {\n          order: 'asc'\n        }\n      })\n  }\n\n  // set instance query sort\n  self.dsl.sort = sort\n  return self\n}\n\n/**\n * @method\n * @name EcomSearch#setSortOrder\n * @description Defines most common sorting options and set\n * on instance query for next search request.\n *\n * @param {('sales'|'news'|'lowest_price'|'highest_price'|'offers'|'slug'|'sku'|'views')} [enumOrder='views'] -\n * Sort option enum or valid asc sortable item field\n * @returns {self}\n *\n * @example\n\n// Set sort by top selling products and run search request\nsearch.setSortOrder('sales').fetch()\n\n* @example\n\n// Sort next search result starting by most popular products\n// It's the default preseted sort order (views)\nsearch.setSortOrder()\n\n */\n","import * as merge from 'lodash.merge'\n\nconst getNestedRule = (filter, occur) => {\n  // treat nested query object\n  // look './set-specs.js' as example\n  const query = filter && filter.nested && filter.nested.query\n  if (query && query.bool && Array.isArray(query.bool[occur])) {\n    return query.bool[occur].find(rule => rule.term)\n  }\n  return undefined\n}\n\nexport default (self, filter, occur = 'filter') => {\n  const type = Object.keys(filter)[0]\n  // merge general filter to current Query DSL\n  // ensure query.bool.filter is array\n  merge(self.dsl, {\n    query: {\n      bool: {\n        [occur]: []\n      }\n    }\n  })\n  const filters = self.dsl.query.bool[occur]\n\n  // check if new filter object should be added or replace other\n  let rule\n  switch (type) {\n    case 'terms':\n    case 'term':\n    case 'multi_match':\n    case 'range':\n      if (typeof filter[type] === 'object' && filter[type] !== null) {\n        const field = Object.keys(filter[type])[0]\n        for (let i = 0; i < filters.length; i++) {\n          // check if is the same field\n          const rule = filters[i][Object.keys(filters[i])[0]]\n          if (typeof rule === 'object' && rule !== null && Object.keys(rule)[0] === field) {\n            // replace filter object\n            filters[i] = filter\n            return self\n          }\n        }\n      }\n      break\n\n    case 'nested':\n      rule = getNestedRule(filter, occur)\n      if (rule) {\n        // check field and key value for nested object filter\n        const field = Object.keys(rule.term)[0]\n        const key = rule.term[field]\n        // run root filters list first\n        for (let i = 0; i < filters.length; i++) {\n          const rule = getNestedRule(filters[i], occur)\n          // check field and key value\n          if (rule && rule.term[field] === key) {\n            // replace filter object\n            filters[i] = filter\n            return self\n          }\n        }\n      }\n  }\n\n  // add new filter object to current list\n  filters.push(filter)\n  return self\n}\n\n/**\n * @method\n * @name EcomSearch#mergeFilter\n * @description Add/update a filter object on current\n * Query DSL filters list for next search request.\n *\n * @param {object} filter - A valid object for Query DSL\n * [filter context]{@link https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html}\n * @param {string} [occur='filter'] - Occurrence type for\n * [boolean query]{@link https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html}\n * @returns {self}\n *\n * @example\n\n// Add custom filter by product quantity\nsearch.mergeFilter({\n  term: {\n    quantity: 0\n  }\n})\n\n * @example\n\n// Set filter by SKUs and run search request\nconst filter = { terms: { sku: ['nb-apl-1203', 'hd-csr-303'] } }\nsearch.mergeFilter(filter).fetch()\n\n */\n","export default (self, field, occur = 'filter') => {\n  // remove filter for current product field\n  const filters = self.dsl.query && self.dsl.query.bool && self.dsl.query.bool[occur]\n  if (Array.isArray(filters)) {\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i]\n      if ((filter.nested && filter.nested.path === field) || filter[Object.keys(filter)[0]][field]) {\n        // remove filters array element\n        filters.splice(i, 1)\n        break\n      }\n    }\n  }\n  return self\n}\n\n/**\n * @method\n * @name EcomSearch#removeFilter\n * @description Remove a filter object on current\n * Query DSL filters list for next search request.\n *\n * @param {string} field - A valid\n * [item field]{@link https://developers.e-com.plus/docs/api/#/search/items/items}\n * with dot notation for nested properties\n * @param {string} [occur='filter'] - Occurrence type for\n * [boolean query]{@link https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html}\n * @returns {self}\n *\n * @example\n\n// Remove filter by brand IDs and all specification filters\nsearch.removeFilter('brands._id').removeFilter('specs')\n\n * @example\n\n// Remove filter by category names and run seach request\nsearch.removeFilter('categories.name').fetch()\n\n */\n","export default (self, gridId, textOptions) => {\n  // nested ELS object\n  // http://nocf-www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html\n  if (Array.isArray(textOptions)) {\n    // add/update filter\n    return self.mergeFilter({\n      nested: {\n        path: 'specs',\n        query: {\n          bool: {\n            filter: [{\n              term: {\n                'specs.grid': gridId\n              }\n            }, {\n              terms: {\n                'specs.text': textOptions\n              }\n            }]\n          }\n        }\n      }\n    })\n  }\n\n  if (textOptions === null) {\n    // remove filter for current grid\n    const filters = self.dsl.query && self.dsl.query.bool && self.dsl.query.bool.filter\n    if (Array.isArray(filters)) {\n      for (let i = 0; i < filters.length; i++) {\n        if (filters[i] && filters[i].nested) {\n          const { path, query } = filters[i].nested\n          if (path === 'specs' && query && query.bool) {\n            // search from grid ID on nested filters\n            const rules = query.bool.filter\n            if (Array.isArray(rules) && rules.find(({ term }) => term && term['specs.grid'] === gridId)) {\n              // grid ID found\n              // remove filters array element\n              filters.splice(i, 1)\n              return self\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return self\n}\n\n/**\n * @method\n * @name EcomSearch#setSpec\n * @description Add, update or remove search filter\n * by product specification based on grid ID and list of text options to match.\n *\n * @param {string} gridId - Grid ID such as 'size'\n * @param {array|null} textOptions - List of chosen options such as `['M', 'G']`\n * or null to clear current grid filter\n * @returns {self}\n *\n * @example\n\n// Set filter by size specification and run search request\nsearch.setSpec('size', ['M', 'G']).fetch()\n// Update size options and search again\nsearch.setSpec('size', ['P', 'M', 'G']).fetch()\n\n * @example\n\n// Remove filter by size for next search\nsearch.setSpec('size', null)\n\n */\n","export default (self, field, prop, value, occur) => {\n  // abstraction to set or remove filter by field IDs/names\n  const newProp = field !== null ? `${field}.${prop}` : prop\n  if (Array.isArray(value)) {\n    // setup new filter object\n    const filter = { terms: {} }\n    filter.terms[newProp] = value\n    // remove concurrent filter and merge the new\n    let concurrentProp\n    if (field !== null) {\n      concurrentProp = `${field}.${(prop === '_id' ? 'name' : '_id')}`\n    } else {\n      // product SKUs or IDs\n      concurrentProp = prop === '_id' ? 'sku' : '_id'\n    }\n    return self.removeFilter(concurrentProp, occur).mergeFilter(filter, occur)\n  } else if (value === null) {\n    // just remove respective filter\n    return self.removeFilter(newProp, occur)\n  }\n  return self\n}\n","import commonFilter from './../lib/common-filter'\n\n// handle filter by category names\nexport default (self, categoryNames) => commonFilter(self, 'categories', 'name', categoryNames, 'must')\n\n/**\n * @method\n * @name EcomSearch#setCategoryNames\n * @description Defines list of category names to match on next search request,\n * filtering product results by category.\n *\n * @param {array<string>|null} categoryNames - List of category names\n * @returns {self}\n *\n * @example\n\n// Set filter by categories and run search request\nsearch.setCategoryNames([ 'Headset', 'Monitores Gamer' ]).fetch()\n\n * @example\n\n// Remove filter by category names\nsearch.setCategoryNames(null)\n\n */\n","import commonFilter from './../lib/common-filter'\n\n// handle filter by category IDs\nexport default (self, categoryIds) => commonFilter(self, 'categories', '_id', categoryIds, 'must')\n\n/**\n * @method\n * @name EcomSearch#setCategoryIds\n * @description Defines list of category IDs to match on next search request,\n * filtering product results by category.\n *\n * @param {array<string>|null} categoryIds - List of category ObjectIDs (`_id`)\n * @returns {self}\n *\n * @example\n\n// Set filter by category IDs for next search\nsearch.setCategoryIds([ '5c7009fdc626be23430d4f82', '5c700a53c626be23430d4f88' ])\n\n * @example\n\n// Remove filter by category IDs and run search request\nsearch.setCategoryIds(null).fetch()\n\n */\n","import commonFilter from './../lib/common-filter'\n\n// handle filter by brand names\nexport default (self, brandNames) => commonFilter(self, 'brands', 'name', brandNames)\n\n/**\n * @method\n * @name EcomSearch#setBrandNames\n * @description Defines list of brand names to match on next search request,\n * filtering product results by brand.\n *\n * @param {array<string>|null} brandNames - List of brand names\n * @returns {self}\n *\n * @example\n\n// Set filter by brands and run search request\nsearch.setBrandNames([ 'Corsair', 'Apple' ]).fetch()\n\n * @example\n\n// Remove filter by brand names\nsearch.setBrandNames(null)\n\n */\n","import commonFilter from './../lib/common-filter'\n\n// handle filter by brand IDs\nexport default (self, brandIds) => commonFilter(self, 'brands', '_id', brandIds)\n\n/**\n * @method\n * @name EcomSearch#setBrandIds\n * @description Defines list of brand IDs to match on next search request,\n * filtering product results by brand.\n *\n * @param {array<string>|null} brandIds - List of brand ObjectIDs (`_id`)\n * @returns {self}\n *\n * @example\n\n// Set filter by brand ID and run search request\nsearch.setBrandIds([ '5c703b35c626be23430d5030' ]).fetch()\n\n * @example\n\n// Remove filter by brand ID\nsearch.setBrandIds(null)\n\n */\n","import commonFilter from './../lib/common-filter'\n\n// handle filter by product SKUs\nexport default (self, skus) => commonFilter(self, null, 'sku', skus)\n\n/**\n * @method\n * @name EcomSearch#setSkus\n * @description Defines list of product SKUs to match on next search request.\n *\n * @param {array<string>|null} skus - List of product SKUs\n * @returns {self}\n *\n * @example\n\n// Set filter by SKUs for next search\nsearch.setSkus(['nb-apl-1203', 'hd-csr-303'])\n\n * @example\n\n// Remove filter by SKU and run search request\nsearch.setSkus(null).fetch()\n\n */\n","import commonFilter from './../lib/common-filter'\n\n// handle filter by product IDs\nexport default (self, productIds) => commonFilter(self, null, '_id', productIds)\n\n/**\n * @method\n * @name EcomSearch#setProductIds\n * @description Defines list of product IDs to match on next search request.\n *\n * @param {array<string>|null} productIds - List of product ObjectIDs (`_id`)\n * @returns {self}\n *\n * @example\n\n// Set filter by ID and run search request\nsearch.setProductIds([ '5c703c40c626be23430d5033' ]).fetch()\n\n * @example\n\n// Remove filter by product ID\nsearch.setProductIds(null)\n\n */\n","export default (self, minPrice, maxPrice) => {\n  // price ranges\n  const price = {}\n  if (typeof minPrice === 'number' && !isNaN(minPrice)) {\n    price.gte = minPrice\n  }\n  if (typeof maxPrice === 'number' && !isNaN(maxPrice)) {\n    price.lte = maxPrice\n  }\n\n  // add/update filter\n  return self.mergeFilter({\n    range: {\n      price\n    }\n  })\n}\n\n/**\n * @method\n * @name EcomSearch#setPriceRange\n * @description Defines range filter to match with product price\n * for next search request.\n *\n * @param {number|null} minPrice - Minimun price value\n * @param {number|null} maxPrice - Maximun price value\n * @returns {self}\n *\n * @example\n\n// Set filter by price range and run search request\nsearch.setPriceRange(10, 22.5).fetch()\n\n * @example\n\n// Remove filter by product price for next search\nsearch.setPriceRange(null, null)\n\n */\n","import { searchedItems } from '@ecomplus/utils'\n\nexport default (self, result) => {\n  // map list of item objets from search result\n  if (!result) {\n    result = self.result\n  }\n  return searchedItems(result)\n}\n\n/**\n * @method\n * @name EcomSearch#getItems\n * @description List items from search result object.\n *\n * @param {result} [result=self.result] - Search result object\n * @returns {array<object>}\n *\n * @example\n\n// Run search request and list result items\nawait search.fetch()\nsearch.getItems().forEach(item => {\n  console.log(item)\n  console.log(item.name)\n})\n\n * @example\n\n// You can also pass search result object as param\nsearch.fetch().then(result => search.getItems(result).forEach(({ sku }) => console.log(sku)))\n\n */\n","export default (self, result) => {\n  // return total matched items\n  if (!result) {\n    result = self.result || {}\n  }\n  return result.hits ? result.hits.total : undefined\n}\n\n/**\n * @method\n * @name EcomSearch#getTotalCount\n * @description Get total number of products found from search result object.\n *\n * @param {result} [result=self.result] - Search result object\n * @returns {number}\n *\n * @example\n\n// Run search request and count total items matched\nsearch.fetch().then(() => console.log(search.getTotalCount()))\n\n * @example\n\n// You can also pass search result object as param\ntry {\n  const result = await search.fetch()\n  if (search.getTotalCount(result) > 0) {\n    // Listing result items as logic example here\n    console.log(search.getItems(result))\n  }\n} catch (error) {\n  console.error(error)\n}\n\n */\n","export default (self, result) => {\n  // get search term suggestions from result object\n  if (!result) {\n    result = self.result || {}\n  }\n  return (result.suggest && result.suggest.words) || []\n}\n\n/**\n * @typedef {object} suggest\n * @property {string} text - The original keyword from search term\n * @property {number} offset - Position where the keyword starts on search term\n * @property {number} length - Original keyword length\n * @property {array<suggestion>} options - Suggested options to replace original keyword\n */\n\n/**\n * @typedef {object} suggestion\n * @property {string} text - The suggested keyword\n * @property {number} score - Match score up to 1\n * @property {number} freq - How many items match with the suggested keyword\n */\n\n/**\n * @method\n * @name EcomSearch#getTermSuggestions\n * @description Get list of keyword suggestions based on current\n * search term from result object.\n *\n * @param {result} [result=self.result] - Search result object\n * @returns {array<suggest>}\n *\n * @example\n\n// Run search request with wrong term and get suggestions\nsearch.setSearchTerm('smartprone applo').fetch()\n  .then(() => {\n    search.getTermSuggestions().forEach(({ text, options }) => {\n      const bestOption = options[0]\n      // Check match score to suggest term replace\n      if (bestOption.score >= 0.83) {\n        console.log(`should replace '${text}' by '${bestOption.text}' on search term`)\n      }\n    })\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n */\n","export default ({ aggregations }, field) => {\n  // abstraction to get buckets array from result aggregations\n  let buckets\n  if (aggregations && aggregations[field]) {\n    buckets = aggregations[field].buckets\n  }\n  return (Array.isArray(buckets) && buckets) || []\n}\n","import commonAggregation from './../lib/common-aggregation'\n\n// get brand options from aggregations result\nexport default (self, result) => commonAggregation(result || self.result || {}, 'brands')\n\n/**\n * @typedef {object} aggregation\n * @property {string} key - Brand/category/option name\n * @property {number} doc_count - How many items match with the respective key\n */\n\n/**\n * @method\n * @name EcomSearch#getBrands\n * @description List brand options matched from search result object.\n *\n * @param {result} [result=self.result] - Search result object\n * @returns {array<aggregation>}\n *\n * @example\n\n// Run search request and list brand aggregations\nawait search.fetch()\nsearch.getBrands().forEach(aggBrand => {\n  console.log(`we have ${aggBrand.doc_count} items with brand ${aggBrand.key}`)\n})\n\n */\n","import commonAggregation from './../lib/common-aggregation'\n\n// get category options from aggregations result\nexport default (self, result) => commonAggregation(result || self.result || {}, 'categories')\n\n/**\n * @method\n * @name EcomSearch#getCategories\n * @description List category options matched from search result object.\n *\n * @param {result} [result=self.result] - Search result object\n * @returns {array<aggregation>}\n *\n * @example\n\n// Run search request and list category aggregations\nawait search.fetch()\nsearch.getCategories().forEach(aggCategory => {\n  console.log(`we have ${aggCategory.doc_count} items with category ${aggCategory.key}`)\n})\n\n */\n","export default (self, result) => {\n  // get price aggregations from result object\n  if (!result) {\n    result = self.result || {}\n  }\n  const { aggregations } = result\n  return aggregations\n    ? {\n      min: (aggregations.min_price && aggregations.min_price.value) || 0,\n      avg: (aggregations.avg_price && aggregations.avg_price.value) || 0,\n      max: (aggregations.max_price && aggregations.max_price.value) || 0\n    }\n    : {\n      min: 0,\n      avg: 0,\n      max: 0\n    }\n}\n\n/**\n * @method\n * @name EcomSearch#getPriceRange\n * @description Get minimum, maximum and average item prices\n * from search result object.\n *\n * @param {result} [result=self.result] - Search result object\n * @returns {prices}\n *\n * @example\n\n// Run search request and get resultant price range\nsearch.fetch().then(() => {\n  const { min, avg, max } = search.getPriceRange()\n  console.log(`prices => min: ${min}; max: ${max}; avg: ${avg}`)\n})\n\n */\n","export default (self, result) => {\n  // get specs nested aggregations from result object\n  if (!result) {\n    result = self.result || {}\n  }\n  if (result.aggregations) {\n    const { specs } = result.aggregations\n    if (specs && specs.grid && Array.isArray(specs.grid.buckets)) {\n      // map nested buckets\n      return specs.grid.buckets.map(bucket => ({\n        key: bucket.key,\n        doc_count: bucket.doc_count,\n        options: (bucket.text && bucket.text.buckets) || []\n      }))\n    }\n  }\n  return []\n}\n\n/**\n * @typedef {object} spec\n * @property {string} key - Specification grid ID\n * @property {number} doc_count - How many items has the respective grid\n * @property {array<aggregation>} options - List of matched grid options\n */\n\n/**\n * @method\n * @name EcomSearch#getSpecs\n * @description List specification grids and options\n * matched from search result object.\n *\n * @param {result} [result=self.result] - Search result object\n * @returns {array<spec>}\n *\n * @example\n\n// Run search request and list spec options\nawait search.fetch()\nsearch.getSpecs().forEach(aggSpec => {\n  console.log(`${aggSpec.doc_count} items with grid ${aggSpec.key} and the following options:`)\n  aggSpec.options.forEach(aggOption => {\n    console.log(`${aggOption.key} (${aggOption.doc_count})`)\n  })\n})\n\n */\n","/*!\n * @ecomplus/search-engine\n * (c) E-Com Club <ti@e-com.club>\n * Released under the MIT License.\n */\n\n/**\n * JS lib to handle products search with E-Com Plus stores.\n * {@link https://github.com/ecomclub/search-engine GitHub}\n *\n * @module @ecomplus/search-engine\n * @author E-Com Club <ti@e-com.club>\n * @return {@link EcomSearch}\n * @see EcomSearch\n *\n * @example\n * // ES import default\n * import EcomSearch from '@ecomplus/search-engine'\n *\n * @example\n * // With CommonJS\n * const EcomSearch = require('@ecomplus/search-engine')\n *\n * @example\n * <!-- Global `EcomSearch` from CDN on browser -->\n * <script src=\"https://cdn.jsdelivr.net/npm/@ecomplus/search-engine/dist/ecom-search.var.min.js\"></script>\n *\n * @example\n * <!-- Bundle from CDN with `ecomUtils`, `ecomClient`, `_.cloneDeep` and `_.merge` -->\n * <script src=\"https://cdn.jsdelivr.net/npm/@ecomplus/search-engine/dist/ecom-search.bundle.min.js\"></script>\n */\n\nimport { $ecomConfig } from '@ecomplus/utils'\nimport fetch from './methods/fetch'\nimport reset from './methods/reset'\nimport setSearchTerm from './methods/set-search-term'\nimport setPageNumber from './methods/set-page-number'\nimport setPageSize from './methods/set-page-size'\nimport setSortOrder from './methods/set-sort-order'\nimport mergeFilter from './methods/merge-filter'\nimport removeFilter from './methods/remove-filter'\nimport setSpec from './methods/set-spec'\nimport setCategoryNames from './methods/set-category-names'\nimport setCategoryIds from './methods/set-category-ids'\nimport setBrandNames from './methods/set-brand-names'\nimport setBrandIds from './methods/set-brand-ids'\nimport setSkus from './methods/set-skus'\nimport setProductIds from './methods/set-product-ids'\nimport setPriceRange from './methods/set-price-range'\nimport getItems from './methods/get-items'\nimport getTotalCount from './methods/get-total-count'\nimport getTermSuggestions from './methods/get-term-suggestions'\nimport getBrands from './methods/get-brands'\nimport getCategories from './methods/get-categories'\nimport getPriceRange from './methods/get-price-range'\nimport getSpecs from './methods/get-specs'\n\nconst _key = 'ecomSeachHistory'\nconst _storage = typeof window === 'object' && window.localStorage\n\nexport default function (storeId, storageKey = _key, localStorage = _storage) {\n  const self = this\n\n  /**\n   * Respective Store ID number.\n   * @name EcomSearch#storeId\n   * @type {number}\n   */\n  this.storeId = storeId || $ecomConfig.get('store_id')\n\n  /**\n   * Item key to handle persistent [search history]{@link EcomSearch#history} data\n   * with [localStorage]{@link EcomSearch#localStorage}.\n   * @name EcomSearch#storageKey\n   * @type {string|null}\n   */\n  this.storageKey = storageKey\n\n  /**\n   * [Storage interface]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage}.\n   * @name EcomSearch#localStorage\n   * @type {object}\n   */\n  this.localStorage = localStorage\n\n  /**\n   * Search terms history.\n   * @name EcomSearch#history\n   * @type {array<string>}\n   */\n  this.history = []\n\n  /**\n   * Current\n   * [Query DSL]{@link https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html}\n   * for [Search API]{@link https://developers.e-com.plus/docs/api/#/search/items/items}\n   * request body.\n   * <br>\n   * You can edit this object to manually set Query DSL properties,\n   * or you can use instance methods listed below.\n   * @name EcomSearch#dsl\n   * @type {object}\n   */\n  this.dsl = {}\n\n  /**\n   * Last search result object obtained with the\n   * [fetch method]{@link EcomSearch#fetch}.\n   * @name EcomSearch#result\n   * @type {result|undefined}\n   */\n  this.result = undefined\n\n  // instance methods\n  this.fetch = (isSimpleSearch, axiosConfig) => fetch(self, isSimpleSearch, axiosConfig)\n  this.reset = () => reset(self)\n  this.setSearchTerm = term => setSearchTerm(self, term)\n  this.setPageNumber = page => setPageNumber(self, page)\n  this.setPageSize = limit => setPageSize(self, limit)\n  this.setSortOrder = enumOrder => setSortOrder(self, enumOrder)\n  this.mergeFilter = (filter, occur) => mergeFilter(self, filter, occur)\n  this.removeFilter = (field, occur) => removeFilter(self, field, occur)\n  this.setSpec = (gridId, textOptions) => setSpec(self, gridId, textOptions)\n  this.setCategoryNames = categoryNames => setCategoryNames(self, categoryNames)\n  this.setCategoryIds = categoryIds => setCategoryIds(self, categoryIds)\n  this.setBrandNames = brandNames => setBrandNames(self, brandNames)\n  this.setBrandIds = brandIds => setBrandIds(self, brandIds)\n  this.setSkus = skus => setSkus(self, skus)\n  this.setProductIds = productIds => setProductIds(self, productIds)\n  this.setPriceRange = (minPrice, maxPrice) => setPriceRange(self, minPrice, maxPrice)\n  this.getItems = result => getItems(self, result)\n  this.getTotalCount = result => getTotalCount(self, result)\n  this.getTermSuggestions = result => getTermSuggestions(self, result)\n  this.getBrands = result => getBrands(self, result)\n  this.getCategories = result => getCategories(self, result)\n  this.getPriceRange = result => getPriceRange(self, result)\n  this.getSpecs = result => getSpecs(self, result)\n\n  // preset query object\n  reset(self)\n  if (localStorage && storageKey) {\n    // try to preset search history from storage\n    const history = localStorage.getItem(storageKey)\n    if (typeof history === 'string') {\n      self.history = history.split('||')\n    }\n  }\n}\n\n/**\n * Construct a new search engine instance object.\n * @class EcomSearch\n * @param {number} [storeId=$ecomConfig.get('store_id')] - Preset Store ID number\n * @param {string|null} [storageKey='ecomSeachHistory'] - Item key to persist search history data\n * @param {object} [localStorage=window.localStorage] -\n * [Local Storage interface]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage}\n *\n * @example\n\nconst search = new EcomSearch()\n\n *\n * @example\n\n// Defining Store ID other than the configured on `$ecomConfig`\nconst storeId = 2000\nconst search = new EcomSearch(storeId)\n\n */\n"],"sourceRoot":""}